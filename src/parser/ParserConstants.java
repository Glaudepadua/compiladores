/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_CONSTANT = 6;
  /** RegularExpression Id. */
  int DOUBLE_CONSTANT = 7;
  /** RegularExpression Id. */
  int LOGIC_CONSTANT = 8;
  /** RegularExpression Id. */
  int STRING_CONSTANT = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int NULL_CONSTANT = 11;
  /** RegularExpression Id. */
  int VOID_CONSTANT = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int FOR = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int CLASS = 16;
  /** RegularExpression Id. */
  int INTERFACE = 17;
  /** RegularExpression Id. */
  int EXTENDS = 18;
  /** RegularExpression Id. */
  int IMPLEMENTS = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int STATIC = 21;
  /** RegularExpression Id. */
  int BREAK = 22;
  /** RegularExpression Id. */
  int STRING = 23;
  /** RegularExpression Id. */
  int INT = 24;
  /** RegularExpression Id. */
  int BOOLEAN = 25;
  /** RegularExpression Id. */
  int DOUBLE = 26;
  /** RegularExpression Id. */
  int LIST = 27;
  /** RegularExpression Id. */
  int NEW = 28;
  /** RegularExpression Id. */
  int MODIFIER = 29;
  /** RegularExpression Id. */
  int RETURN = 30;
  /** RegularExpression Id. */
  int SUPER = 31;
  /** RegularExpression Id. */
  int PRINT = 32;
  /** RegularExpression Id. */
  int READ = 33;
  /** RegularExpression Id. */
  int ASSIGN = 34;
  /** RegularExpression Id. */
  int GT = 35;
  /** RegularExpression Id. */
  int LT = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int GE = 38;
  /** RegularExpression Id. */
  int LE = 39;
  /** RegularExpression Id. */
  int NE = 40;
  /** RegularExpression Id. */
  int PLUS = 41;
  /** RegularExpression Id. */
  int MINUS = 42;
  /** RegularExpression Id. */
  int STAR = 43;
  /** RegularExpression Id. */
  int SLASH = 44;
  /** RegularExpression Id. */
  int REM = 45;
  /** RegularExpression Id. */
  int LPAREN = 46;
  /** RegularExpression Id. */
  int RPAREN = 47;
  /** RegularExpression Id. */
  int LBRACE = 48;
  /** RegularExpression Id. */
  int RBRACE = 49;
  /** RegularExpression Id. */
  int SEMICOLON = 50;
  /** RegularExpression Id. */
  int COMMA = 51;
  /** RegularExpression Id. */
  int DOT = 52;
  /** RegularExpression Id. */
  int RBRACKET = 53;
  /** RegularExpression Id. */
  int LBRACKET = 54;
  /** RegularExpression Id. */
  int IDENT = 55;
  /** RegularExpression Id. */
  int LETTER = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<INTEGER_CONSTANT>",
    "<DOUBLE_CONSTANT>",
    "<LOGIC_CONSTANT>",
    "<STRING_CONSTANT>",
    "<DIGIT>",
    "\"null\"",
    "\"void\"",
    "\"if\"",
    "\"for\"",
    "\"while\"",
    "\"class\"",
    "\"interface\"",
    "\"extends\"",
    "\"implements\"",
    "\"else\"",
    "\"static\"",
    "\"break\"",
    "\"string\"",
    "\"int\"",
    "\"boolean\"",
    "\"double\"",
    "<LIST>",
    "\"new\"",
    "<MODIFIER>",
    "\"return\"",
    "\"super\"",
    "\"print\"",
    "\"read\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"]\"",
    "\"[\"",
    "<IDENT>",
    "<LETTER>",
  };

}
