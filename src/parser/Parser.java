/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import java.io.*;
import recovery.*;

public class Parser implements ParserConstants {
  int countParseError = 0;
  boolean debug_recovery = true;

  public static void main(String args []) throws ParseException, TokenMgrError
  {
    Parser parser = null;
    boolean debug_as = true;
    if (args.length == 1)
    {
      System.out.println("\u005cn Parser: Lendo a entrada ...\u005cn");
      parser = new Parser(System.in);
    }
    else if (args.length == 0)
    {
      try
      {
        System.out.println("\u005cnParser: Lendo o arquivo ExemploCorreto ...\u005cn");
        parser = new Parser(new java.io.FileInputStream("ExemploCorreto.txt"));
        parser.Start();
        System.out.println("\u005cnParser: Lendo o arquivo ExemploIncorreto ...\u005cn");
        parser = new Parser(new java.io.FileInputStream("ExemploIncorreto.txt"));
        parser.Start();
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Parser: O arquivo n\u00e3o foi encontrado.");
        return;
      }
      catch (ParseEOFException e)
      {
        System.err.println(e.getMessage());
      }
      finally
      {
        //System.out.println(parser.token_source.foundLexError() + "Lexical Errors found");        System.out.println(parser.countParseError + "Syntactic Errors found");
      }
    }
    else
    {
      System.out.println("Parser: Voc\u00ea deve usar da seguinte maneira:");
      System.out.println(" java Parser < file");
      System.out.println("Ou");
      System.out.println(" java Parser file");
      return;
    }
  }

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\u005c"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {}
    return s;
  }
  boolean eof;

  void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token tok;
    if (debug_recovery)
    {
      System.out.println("\u005cn *** " + met + " *** \u005cn Syncronizing Set: " + g);
    }
    if (g == null) throw e;
    tok = getToken(1);
    while (!eof)
    {
      if (g.contains(tok.kind))
      {
        if (debug_recovery) System.out.println("Found syncronizing token: " + im(tok.kind));
        break;
      }
      if (debug_recovery) System.out.println("Ignoring token: " + im(tok.kind));
      getNextToken();
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF)) eof = true;
    }
    System.out.println(e.getMessage());
    countParseError++;
    if (eof) throw new ParseEOFException("EOF found prematurely.");
  }

  final public void Start() throws ParseException, ParseEOFException {
    trace_call("Start");
    try {
  RecoverySet g = First.Start;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      case CLASS:
      case INTERFACE:
      case MODIFIER:
        classlist(g);
        try {
          jj_consume_token(0);
        } catch (ParseException e) {
    consumeUntil(g, e, "Start");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case CLASS:
        case INTERFACE:
        case MODIFIER:
          Start();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Start");
    }
  }

  final public void classlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classlist");
    try {
  RecoverySet f = First.classlist.union(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFIER:
        jj_consume_token(MODIFIER);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        classdecl(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
        case MODIFIER:
          classlist(g);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
      case INTERFACE:
        interfacedecl(g);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("classlist");
    }
  }

  final public void interfacedecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("interfacedecl");
    try {
      try {
        jj_consume_token(INTERFACE);
        jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        interfacebody(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "interfacedecl");
      }
    } finally {
      trace_return("interfacedecl");
    }
  }

  final public void interfacebody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("interfacebody");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID_CONSTANT:
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case IDENT:
            type(g);
            break;
          case VOID_CONSTANT:
            jj_consume_token(VOID_CONSTANT);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_1;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
          break;
        case LIST:
          jj_consume_token(LIST);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IDENT);
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
    consumeUntil(g, e, "interfacebody");
      }
    } finally {
      trace_return("interfacebody");
    }
  }

  final public void classdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classdecl");
    try {
      try {
        jj_consume_token(CLASS);
        jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPLEMENTS:
          jj_consume_token(IMPLEMENTS);
          jj_consume_token(INTERFACE);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        classbody(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "classdecl");
      }
    } finally {
      trace_return("classdecl");
    }
  }

  final public void classbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classbody");
    try {
  RecoverySet f1 = new RecoverySet(RBRACE), f2 = new RecoverySet(SEMICOLON), f3 = First.methoddecl.union(f1), f4 = First.constructdecl.union(f3), f5 = First.vardecl.union(f4);
      try {
        jj_consume_token(LBRACE);
        label_2:
        while (true) {
          if (jj_2_1(4)) {
            ;
          } else {
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MODIFIER:
            jj_consume_token(MODIFIER);
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          vardecl(f2);
          jj_consume_token(SEMICOLON);
        }
        label_3:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_3;
          }
          constructdecl(f4);
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID_CONSTANT:
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case LIST:
          case MODIFIER:
          case IDENT:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_4;
          }
          methoddecl(f3);
        }
        jj_consume_token(RBRACE);
      } catch (ParseException e) {
    consumeUntil(g, e, "classbody");
      }
    } finally {
      trace_return("classbody");
    }
  }

  final public void vardecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("vardecl");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          type(g);
          jj_consume_token(IDENT);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_5;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_6;
            }
            jj_consume_token(COMMA);
            jj_consume_token(IDENT);
            label_7:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[15] = jj_gen;
                break label_7;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
            }
          }
          break;
        case LIST:
          jj_consume_token(LIST);
          jj_consume_token(LT);
          jj_consume_token(GT);
          jj_consume_token(IDENT);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            jj_consume_token(IDENT);
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "vardecl");
      }
    } finally {
      trace_return("vardecl");
    }
  }

  final public void constructdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("constructdecl");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODIFIER:
          jj_consume_token(MODIFIER);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(IDENT);
        methodbody(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "constructdecl");
      }
    } finally {
      trace_return("constructdecl");
    }
  }

  final public void methoddecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methoddecl");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODIFIER:
          jj_consume_token(MODIFIER);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID_CONSTANT:
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case IDENT:
            type(g);
            break;
          case VOID_CONSTANT:
            jj_consume_token(VOID_CONSTANT);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_9;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
          break;
        case LIST:
          jj_consume_token(LIST);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(IDENT);
        methodbody(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "methoddecl");
      }
    } finally {
      trace_return("methoddecl");
    }
  }

  final public void methodbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methodbody");
    try {
  RecoverySet f = new RecoverySet(RPAREN);
      try {
        jj_consume_token(LPAREN);
        paramlist(f);
        jj_consume_token(RPAREN);
        statement(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "methodbody");
      }
    } finally {
      trace_return("methodbody");
    }
  }

  final public void paramlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("paramlist");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case LIST:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case IDENT:
            type(g);
            jj_consume_token(IDENT);
            label_10:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[23] = jj_gen;
                break label_10;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
            }
            break;
          case LIST:
            jj_consume_token(LIST);
            jj_consume_token(IDENT);
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LIST:
            case COMMA:
              ;
              break;
            default:
              jj_la1[25] = jj_gen;
              break label_11;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              type(g);
              jj_consume_token(IDENT);
              label_12:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LBRACKET:
                  ;
                  break;
                default:
                  jj_la1[26] = jj_gen;
                  break label_12;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
              }
              break;
            case LIST:
              jj_consume_token(LIST);
              jj_consume_token(IDENT);
              break;
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "paramlist");
      }
    } finally {
      trace_return("paramlist");
    }
  }

  final public void type(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("type");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          break;
        case DOUBLE:
          jj_consume_token(DOUBLE);
          break;
        case IDENT:
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "type");
      }
    } finally {
      trace_return("type");
    }
  }

  final public void statement(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statement");
    try {
  RecoverySet f1 = new RecoverySet(SEMICOLON);
  RecoverySet f2 = new RecoverySet(RBRACE);
      try {
        if (jj_2_3(2)) {
          vardecl(f1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            atribstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case PRINT:
            printstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case READ:
            readstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case RETURN:
            returnstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case SUPER:
            superstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case IF:
            ifstat(g);
            break;
          case FOR:
            forstat(g);
            break;
          case LBRACE:
            jj_consume_token(LBRACE);
            statlist(f2);
            jj_consume_token(RBRACE);
            break;
          case BREAK:
            jj_consume_token(BREAK);
            jj_consume_token(SEMICOLON);
            break;
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "statement");
      }
    } finally {
      trace_return("statement");
    }
  }

  final public void atribstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("atribstat");
    try {
  RecoverySet f1 = new RecoverySet(ASSIGN);
      try {
        lvalue(f1);
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          alocexpression(g);
          break;
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          expression(g);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "atribstat");
      }
    } finally {
      trace_return("atribstat");
    }
  }

  final public void printstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("printstat");
    try {
      try {
        jj_consume_token(PRINT);
        expression(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "printstat");
      }
    } finally {
      trace_return("printstat");
    }
  }

  final public void readstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("readstat");
    try {
      try {
        jj_consume_token(READ);
        lvalue(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "readstat");
      }
    } finally {
      trace_return("readstat");
    }
  }

  final public void returnstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("returnstat");
    try {
      try {
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          expression(g);
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "returnstat");
      }
    } finally {
      trace_return("returnstat");
    }
  }

  final public void superstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("superstat");
    try {
  RecoverySet f = new RecoverySet(RPAREN);
      try {
        jj_consume_token(SUPER);
        jj_consume_token(LPAREN);
        arglist(f);
        jj_consume_token(RPAREN);
      } catch (ParseException e) {
    consumeUntil(g, e, "superstat");
      }
    } finally {
      trace_return("superstat");
    }
  }

  final public void ifstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ifstat");
    try {
  RecoverySet f1 = new RecoverySet(RPAREN), f2 = new RecoverySet(ELSE).union(g);
      try {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        expression(f1);
        jj_consume_token(RPAREN);
        statement(f2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case FOR:
          case BREAK:
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case LIST:
          case RETURN:
          case SUPER:
          case PRINT:
          case READ:
          case LBRACE:
          case SEMICOLON:
          case IDENT:
            statement(g);
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "ifstat");
      }
    } finally {
      trace_return("ifstat");
    }
  }

  final public void forstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("forstat");
    try {
  RecoverySet f1 = new RecoverySet(SEMICOLON), f2 = new RecoverySet(RPAREN);
      try {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          atribstat(f1);
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          expression(f1);
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          atribstat(f2);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        statement(g);
      } catch (ParseException e) {
    consumeUntil(g, e, "forstat");
      }
    } finally {
      trace_return("forstat");
    }
  }

  final public void statlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statlist");
    try {
  RecoverySet f = First.statlist.union(g);
      statement(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case BREAK:
      case STRING:
      case INT:
      case BOOLEAN:
      case DOUBLE:
      case LIST:
      case RETURN:
      case SUPER:
      case PRINT:
      case READ:
      case LBRACE:
      case SEMICOLON:
      case IDENT:
        statlist(g);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } finally {
      trace_return("statlist");
    }
  }

  final public void lvalue(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("lvalue");
    try {
      try {
        jj_consume_token(IDENT);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            jj_consume_token(LBRACKET);
            expression(null);
            jj_consume_token(RBRACKET);
            break;
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(IDENT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              jj_consume_token(LPAREN);
              arglist(null);
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[40] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "lvalue");
      }
    } finally {
      trace_return("lvalue");
    }
  }

  final public void alocexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("alocexpression");
    try {
  RecoverySet f1 = new RecoverySet(RPAREN), f2 = new RecoverySet(RBRACKET);
      jj_consume_token(NEW);
      if (jj_2_4(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          break;
        case LIST:
          jj_consume_token(LIST);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        arglist(f1);
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          type(g);
          label_14:
          while (true) {
            jj_consume_token(LBRACKET);
            expression(f2);
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[43] = jj_gen;
              break label_14;
            }
          }
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("alocexpression");
    }
  }

  final public void expression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("expression");
    try {
      try {
        numexpr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case EQ:
        case GE:
        case LE:
        case NE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            jj_consume_token(LT);
            break;
          case GT:
            jj_consume_token(GT);
            break;
          case LE:
            jj_consume_token(LE);
            break;
          case GE:
            jj_consume_token(GE);
            break;
          case EQ:
            jj_consume_token(EQ);
            break;
          case NE:
            jj_consume_token(NE);
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          numexpr();
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "expression");
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void numexpr() throws ParseException, ParseEOFException {
    trace_call("numexpr");
    try {
      term();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
      }
    } finally {
      trace_return("numexpr");
    }
  }

  final public void term() throws ParseException, ParseEOFException {
    trace_call("term");
    try {
      unaryexpr();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
      }
    } finally {
      trace_return("term");
    }
  }

  final public void unaryexpr() throws ParseException, ParseEOFException {
    trace_call("unaryexpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      factor();
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void factor() throws ParseException, ParseEOFException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
        jj_consume_token(INTEGER_CONSTANT);
        break;
      case STRING_CONSTANT:
        jj_consume_token(STRING_CONSTANT);
        break;
      case NULL_CONSTANT:
        jj_consume_token(NULL_CONSTANT);
        break;
      case DOUBLE_CONSTANT:
        jj_consume_token(DOUBLE_CONSTANT);
        break;
      case IDENT:
        lvalue(null);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expression(null);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void arglist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("arglist");
    try {
  RecoverySet f = new RecoverySet(COMMA).union(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
      case DOUBLE_CONSTANT:
      case STRING_CONSTANT:
      case NULL_CONSTANT:
      case PLUS:
      case MINUS:
      case LPAREN:
      case IDENT:
        expression(f);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          expression(f);
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } finally {
      trace_return("arglist");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20030001,0x20030001,0x20000000,0x20030000,0x30000,0x40000,0x7801000,0x0,0xf801000,0x40000,0x80000,0x20000000,0x2f801000,0x0,0x0,0x0,0x0,0xf800000,0x20000000,0x20000000,0x7801000,0x0,0xf801000,0x0,0xf800000,0x8000000,0x0,0x8000000,0xf800000,0x7800000,0xc0406000,0x10000ac0,0xac0,0xcfc06000,0x100000,0x0,0xac0,0x0,0xcfc06000,0x0,0x0,0x0,0x8000000,0x0,0x7800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xac0,0x0,0xac0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x400000,0x800000,0x0,0x0,0x0,0x800000,0x400000,0x80000,0x400000,0x80000,0x800000,0x0,0x0,0x800000,0x400000,0x800000,0x400000,0x800000,0x80000,0x400000,0x80000,0x800000,0x800000,0x850003,0x804600,0x804600,0x850003,0x0,0x800000,0x804600,0x800000,0x850003,0x500000,0x4000,0x500000,0x800000,0x400000,0x800000,0x1f8,0x1f8,0x600,0x600,0x3800,0x3800,0x600,0x600,0x804000,0x80000,0x804600,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
