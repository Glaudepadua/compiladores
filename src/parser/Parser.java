/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import java.io.*;
import recovery.*;
import syntacticTree.*;
import semanalysis.*;
import java.util.ArrayList;
import java.util.List;

public class Parser implements ParserConstants {
  int countParseError = 0;
  boolean debug_recovery = true;

  public static void main(String args []) throws ParseException, TokenMgrError
  {
    Parser parser = null;
    boolean debug_as = true;
    if (args.length == 1)
    {
      System.out.println("\u005cn Parser: Lendo a entrada ...\u005cn");
      parser = new Parser(System.in);
    }
    else if (args.length == 0)
    {
      ListNode root = null;
      try
      {
        parser = readFile("/exemplo/ExemploCorreto.txt");
        root = parser.Start();
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Parser: O arquivo n\u00c3\u00a3o foi encontrado.");
        return;
      }
      catch (ParseEOFException e)
      {
        System.err.println(e.getMessage());
      }
      finally
      {
        //System.out.println(parser.token_source.foundLexError() + "Lexical Errors found");        System.out.println(parser.countParseError + " erro(s) sint\u00e1ticos encontrados.");
      }
      if ( //parser.token_source.foundLexError() +  verifica se pode operar sobre      parser.countParseError == 0)
      {
        PrintTree prt = new PrintTree();
        prt.printRoot(root); // chama método para imprimir árvore        TypeCheck tc = new TypeCheck();
        try
        {
          tc.TypeCheckRoot(root);
          System.out.println("0 Semantic Errors found");
        }
        catch (SemanticException e)
        {
          System.out.println(e.getMessage());
        }
      }
    }
    else
    {
      System.out.println("Parser: Voc\u00c3\u00aa deve usar da seguinte maneira:");
      System.out.println(" java Parser < file");
      System.out.println("Ou");
      System.out.println(" java Parser file");
      return;
    }
  }

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage [x];
    k = s.lastIndexOf("\u005c"");
    try
    {
      s = s.substring(1, k);
    }
    catch (StringIndexOutOfBoundsException e)
    {}
    return s;
  }
  boolean eof;

  void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
  {
    Token tok;
    if (debug_recovery)
    {
      System.out.println("\u005cn *** " + met + " *** \u005cn Set sincronizador: " + g);
    }
    if (g == null) throw e;
    tok = getToken(1);
    while (!eof)
    {
      if (g.contains(tok.kind))
      {
        if (debug_recovery) System.out.println("Token sincronizador encontrado: " + im(tok.kind));
        break;
      }
      if (debug_recovery) System.out.println("Token ignorado: " + im(tok.kind));
      getNextToken();
      tok = getToken(1);
      if (tok.kind == EOF && !g.contains(EOF)) eof = true;
    }
    System.out.println(e.getMessage());
    countParseError++;
    if (eof) throw new ParseEOFException("EOF found prematurely.");
  }

  static public Parser readFile(String file) throws FileNotFoundException
  {
    String current = System.getProperty("user.dir");
    System.out.println("\u005cnParser: Lendo o arquivo ...\u005cn" + current);
    return new Parser(new java.io.FileInputStream(current + file));
  }

  final public ListNode Start() throws ParseException, ParseEOFException {
    trace_call("Start");
    try {
  RecoverySet g = First.Start;
  ListNode l = null, d = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
    {if (true) return null;}
        break;
      case CLASS:
      case INTERFACE:
      case MODIFIER:
        l = classlist(g);
        try {
          jj_consume_token(0);
      {if (true) return l;}
        } catch (ParseException e) {
    consumeUntil(g, e, "Start");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case CLASS:
        case INTERFACE:
        case MODIFIER:
          d = Start();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
    {if (true) return l;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  final public ListNode classlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classlist");
    try {
  RecoverySet f = First.classlist.union(g);
  ClassDeclNode c = null;
  InterfaceDeclNode i = null;
  ListNode l = null;
  Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFIER:
        t = jj_consume_token(MODIFIER);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        c = classdecl(f, t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
        case MODIFIER:
          l = classlist(g);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
      case INTERFACE:
        i = interfacedecl(g, t);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new ListNode(c, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classlist");
    }
  }

  final public InterfaceDeclNode interfacedecl(RecoverySet g, Token m) throws ParseException, ParseEOFException {
    trace_call("interfacedecl");
    try {
  Token t = null, n = null, e1 = null;
  InterfaceBodyNode i = null;
      try {
        t = jj_consume_token(INTERFACE);
        n = jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          e1 = jj_consume_token(IDENT);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        i = interfacebody(g);
      {if (true) return new InterfaceDeclNode(t, n, e1, m, i);}
      } catch (ParseException e) {
    consumeUntil(g, e, "interfacedecl");
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("interfacedecl");
    }
  }

  final public InterfaceBodyNode interfacebody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("interfacebody");
    try {
  Token t = null, t1 = null, t2 = null, t3 = null;
  ListNode m = null;
  MethodInterfaceDeclNode md;
  int k = 0;
      try {
        t = jj_consume_token(LBRACE);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID_CONSTANT:
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case LIST:
          case MODIFIER:
          case IDENT:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MODIFIER:
            t3 = jj_consume_token(MODIFIER);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID_CONSTANT:
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case IDENT:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STRING:
            case INT:
            case BOOLEAN:
            case DOUBLE:
            case IDENT:
              t1 = type(g);
              break;
            case VOID_CONSTANT:
              jj_consume_token(VOID_CONSTANT);
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_2:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[9] = jj_gen;
                break label_2;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
      k++;
            }
            break;
          case LIST:
            t1 = jj_consume_token(LIST);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          t2 = jj_consume_token(IDENT);
          jj_consume_token(SEMICOLON);
      if (m == null) m = new ListNode(new MethodInterfaceDeclNode(t1, k, t2, t3));
      else m.add(new MethodInterfaceDeclNode(t1, k, t2, t3));
        }
        jj_consume_token(RBRACE);
      {if (true) return new InterfaceBodyNode(t, m);}
      } catch (ParseException e) {
    consumeUntil(g, e, "interfacebody");
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("interfacebody");
    }
  }

  final public ClassDeclNode classdecl(RecoverySet g, Token t4) throws ParseException, ParseEOFException {
    trace_call("classdecl");
    try {
  Token t = null, n = null, e1 = null, e2 = null;
  List < Token > interfaces = new ArrayList < Token > ();
  ClassBodyNode c = null;
      try {
        t = jj_consume_token(CLASS);
        n = jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          e1 = jj_consume_token(IDENT);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPLEMENTS:
          jj_consume_token(IMPLEMENTS);
          e2 = jj_consume_token(IDENT);
        interfaces.add(e2);
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_3;
            }
            jj_consume_token(COMMA);
            e2 = jj_consume_token(IDENT);
        interfaces.add(e2);
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        c = classbody(g);
      {if (true) return new ClassDeclNode(t, n, e1, t4, c, interfaces);}
      } catch (ParseException e) {
    consumeUntil(g, e, "classdecl");
    {if (true) return new ClassDeclNode(t, n, e1, t4, c, interfaces);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classdecl");
    }
  }

  final public ClassBodyNode classbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classbody");
    try {
  RecoverySet f1 = new RecoverySet(RBRACE), f2 = new RecoverySet(SEMICOLON), f3 = First.methoddecl.union(f1), f4 = First.constructdecl.union(f3), f5 = First.vardecl.union(f4);
  ListNode v = null, ct = null, m = null;
  VarDeclNode vd = null;
  ConstructDeclNode cd = null;
  MethodDeclNode md = null;
  Token t = null;
      try {
        t = jj_consume_token(LBRACE);
        label_4:
        while (true) {
          if (jj_2_1(4)) {
            ;
          } else {
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MODIFIER:
            jj_consume_token(MODIFIER);
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          vd = vardecl(f2);
          jj_consume_token(SEMICOLON);
      if (v == null) v = new ListNode(vd);
      else v.add(vd);
        }
        label_5:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_5;
          }
          cd = constructdecl(f4);
        }
      if (ct == null) ct = new ListNode(cd);
      else ct.add(cd);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID_CONSTANT:
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case LIST:
          case MODIFIER:
          case IDENT:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_6;
          }
          md = methoddecl(f3);
      if (m == null) m = new ListNode(md);
      else m.add(md);
        }
        jj_consume_token(RBRACE);
      {if (true) return new ClassBodyNode(t, v, ct, m);}
      } catch (ParseException e) {
    consumeUntil(g, e, "classbody");
    {if (true) return new ClassBodyNode(t, v, ct, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classbody");
    }
  }

  final public VarDeclNode vardecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("vardecl");
    try {
  Token t1 = null, t2, t3 = null;
  int k = 0;
  ListNode l = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          t1 = type(g);
          t2 = jj_consume_token(IDENT);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_7;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
      k++;
          }
      l = new ListNode(new VarNode(t2, k));
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
      k = 0;
            t2 = jj_consume_token(IDENT);
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[18] = jj_gen;
                break label_9;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
      k++;
            }
      l.add(new VarNode(t2, k));
          }
          break;
        case LIST:
          t1 = jj_consume_token(LIST);
          jj_consume_token(LT);
          t3 = type(g);
          jj_consume_token(GT);
          t2 = jj_consume_token(IDENT);
      l = new ListNode(new ListTypeNode(t2, t3));
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[19] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            t2 = jj_consume_token(IDENT);
      l.add(new VarNode(t2, k));
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      {if (true) return new VarDeclNode(t1, l);}
      } catch (ParseException e) {
    consumeUntil(g, e, "vardecl");
    {if (true) return new VarDeclNode(t1, l);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("vardecl");
    }
  }

  final public ConstructDeclNode constructdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("constructdecl");
    try {
  Token t = null;
  MethodBodyNode m = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODIFIER:
          jj_consume_token(MODIFIER);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        t = jj_consume_token(IDENT);
        m = methodbody(g);
      {if (true) return new ConstructDeclNode(t, m);}
      } catch (ParseException e) {
    consumeUntil(g, e, "constructdecl");
    {if (true) return new ConstructDeclNode(t, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("constructdecl");
    }
  }

  final public MethodDeclNode methoddecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methoddecl");
    try {
  Token t1 = null, t2 = null, t3 = null;
  int k = 0;
  MethodBodyNode m = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODIFIER:
          t3 = jj_consume_token(MODIFIER);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID_CONSTANT:
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case IDENT:
            t1 = type(g);
            break;
          case VOID_CONSTANT:
            t1 = jj_consume_token(VOID_CONSTANT);
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_11;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
      k++;
          }
          break;
        case LIST:
          t1 = jj_consume_token(LIST);
          jj_consume_token(LT);
          type(g);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = jj_consume_token(IDENT);
        m = methodbody(g);
      {if (true) return new MethodDeclNode(t1, k, t2, t3, m);}
      } catch (ParseException e) {
    consumeUntil(g, e, "methoddecl");
    {if (true) return new MethodDeclNode(t1, k, t2, t3, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("methoddecl");
    }
  }

  final public MethodBodyNode methodbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methodbody");
    try {
  RecoverySet f = new RecoverySet(RPAREN);
  Token t1 = null;
  ListNode l = null;
  StatementNode s = null;
      try {
        t1 = jj_consume_token(LPAREN);
        l = paramlist(f);
        jj_consume_token(RPAREN);
        s = statement(g);
      {if (true) return new MethodBodyNode(t1, l, s);}
      } catch (ParseException e) {
    consumeUntil(g, e, "methodbody");
    {if (true) return new MethodBodyNode(t1, l, s);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("methodbody");
    }
  }

  final public ListNode paramlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("paramlist");
    try {
  ListNode p = null, q = null;
  int k = 0;
  Token t1 = null;
  Token t2 = null;
  Token t3 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case LIST:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case IDENT:
            t1 = type(g);
            t2 = jj_consume_token(IDENT);
            label_12:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[26] = jj_gen;
                break label_12;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
        k++;
            }
        q = new ListNode(new VarNode(t2, k));
        p = new ListNode(new VarDeclNode(t1, q));
            break;
          case LIST:
            t1 = jj_consume_token(LIST);
            jj_consume_token(LT);
            t3 = type(g);
            jj_consume_token(GT);
            t2 = jj_consume_token(IDENT);
        q = new ListNode(new ListTypeNode(t2, t3));
        p = new ListNode(new VarDeclNode(t1, q));
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LIST:
            case COMMA:
              ;
              break;
            default:
              jj_la1[28] = jj_gen;
              break label_13;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
        k = 0;
              t1 = type(g);
              t2 = jj_consume_token(IDENT);
              label_14:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LBRACKET:
                  ;
                  break;
                default:
                  jj_la1[29] = jj_gen;
                  break label_14;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
        k++;
              }
        q = new ListNode(new VarNode(t2, k));
        p = new ListNode(new VarDeclNode(t1, q));
              break;
            case LIST:
              t1 = jj_consume_token(LIST);
              jj_consume_token(LT);
              t3 = type(g);
              jj_consume_token(GT);
              t2 = jj_consume_token(IDENT);
        q = new ListNode(new ListTypeNode(t2, t3));
        p = new ListNode(new VarDeclNode(t1, q));
              break;
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
      {if (true) return p;}
      } catch (ParseException e) {
    consumeUntil(g, e, "paramlist");
    {if (true) return null;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramlist");
    }
  }

  final public Token type(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("type");
    try {
  Token t1 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          t1 = jj_consume_token(INT);
          break;
        case STRING:
          t1 = jj_consume_token(STRING);
          break;
        case BOOLEAN:
          t1 = jj_consume_token(BOOLEAN);
          break;
        case DOUBLE:
          t1 = jj_consume_token(DOUBLE);
          break;
        case IDENT:
          t1 = jj_consume_token(IDENT);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    consumeUntil(g, e, "type");
      }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

  final public StatementNode statement(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statement");
    try {
  RecoverySet f1 = new RecoverySet(SEMICOLON);
  RecoverySet f2 = new RecoverySet(RBRACE);
  StatementNode s = null;
  ListNode l;
  Token t1 = null;
      try {
        if (jj_2_3(2)) {
          s = vardecl(f1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            s = atribstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case PRINT:
            s = printstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case READ:
            s = readstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case RETURN:
            s = returnstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case SUPER:
            s = superstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case IF:
            s = ifstat(g);
            break;
          case FOR:
            s = forstat(g);
            break;
          case WHILE:
            s = whilestat(g);
            break;
          case LBRACE:
            t1 = jj_consume_token(LBRACE);
            l = statlist(f2);
            jj_consume_token(RBRACE);
      s = new BlockNode(t1, l);
            break;
          case BREAK:
            t1 = jj_consume_token(BREAK);
            jj_consume_token(SEMICOLON);
      s = new BreakNode(t1);
            break;
          case SEMICOLON:
            t1 = jj_consume_token(SEMICOLON);
      s = new NopNode(t1);
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      {if (true) return s;}
      } catch (ParseException e) {
    consumeUntil(g, e, "statement");
    {if (true) return new NopNode(t1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  final public AtribNode atribstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("atribstat");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t1 = null;
  RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
      try {
        e1 = lvalue(f1);
        t1 = jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          e2 = alocexpression(g);
          break;
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          e2 = expression(g);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      {if (true) return new AtribNode(t1, e1, e2);}
      } catch (ParseException e) {
    consumeUntil(g, e, "atribstat");
    {if (true) return new AtribNode(t1, e1, e2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("atribstat");
    }
  }

  final public PrintNode printstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("printstat");
    try {
  ExpreNode e1 = null;
  Token t = null;
      try {
        t = jj_consume_token(PRINT);
        e1 = expression(g);
      {if (true) return new PrintNode(t, e1);}
      } catch (ParseException e) {
    consumeUntil(g, e, "printstat");
    {if (true) return new PrintNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("printstat");
    }
  }

  final public ReadNode readstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("readstat");
    try {
  ExpreNode e1 = null;
  Token t = null;
      try {
        t = jj_consume_token(READ);
        e1 = lvalue(g);
      {if (true) return new ReadNode(t, e1);}
      } catch (ParseException e) {
    consumeUntil(g, e, "readstat");
    {if (true) return new ReadNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("readstat");
    }
  }

  final public ReturnNode returnstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("returnstat");
    try {
  ExpreNode e1 = null;
  Token t = null;
      try {
        t = jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          e1 = expression(g);
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
      {if (true) return new ReturnNode(t, e1);}
      } catch (ParseException e) {
    consumeUntil(g, e, "returnstat");
    {if (true) return new ReturnNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("returnstat");
    }
  }

  final public SuperNode superstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("superstat");
    try {
  ListNode l = null;
  Token t = null;
  RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(SUPER);
        jj_consume_token(LPAREN);
        l = arglist(f);
        jj_consume_token(RPAREN);
      {if (true) return new SuperNode(t, l);}
      } catch (ParseException e) {
    consumeUntil(g, e, "superstat");
    {if (true) return new SuperNode(t, l);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("superstat");
    }
  }

  final public IfNode ifstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ifstat");
    try {
  ExpreNode e1 = null;
  StatementNode s1 = null, s2 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(RPAREN).union(g), f2 = new RecoverySet(ELSE).union(g);
      try {
        t = jj_consume_token(IF);
        jj_consume_token(LPAREN);
        e1 = expression(f1);
        jj_consume_token(RPAREN);
        s1 = statement(f2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case FOR:
          case WHILE:
          case BREAK:
          case STRING:
          case INT:
          case BOOLEAN:
          case DOUBLE:
          case LIST:
          case RETURN:
          case SUPER:
          case PRINT:
          case READ:
          case LBRACE:
          case SEMICOLON:
          case IDENT:
            s2 = statement(g);
            break;
          default:
            jj_la1[36] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
      {if (true) return new IfNode(t, e1, s1, s2);}
      } catch (ParseException e) {
    consumeUntil(g, e, "ifstat");
    {if (true) return new IfNode(t, e1, s1, s2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ifstat");
    }
  }

  final public ForNode forstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("forstat");
    try {
  AtribNode s1 = null, s2 = null;
  StatementNode s3 = null;
  ExpreNode e1 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g), f2 = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          s1 = atribstat(f1);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          e1 = expression(f1);
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          s2 = atribstat(f2);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        s3 = statement(g);
      {if (true) return new ForNode(t, e1, s1, s2, s3);}
      } catch (ParseException e) {
    consumeUntil(g, e, "forstat");
    {if (true) return new ForNode(t, e1, s1, s2, s3);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("forstat");
    }
  }

  final public WhileNode whilestat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("whilestat");
    try {
  StatementNode s1 = null;
  ExpreNode e1 = null;
  Token t = null;
  RecoverySet f1 = new RecoverySet(SEMICOLON).union(g), f2 = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_CONSTANT:
        case DOUBLE_CONSTANT:
        case STRING_CONSTANT:
        case NULL_CONSTANT:
        case PLUS:
        case MINUS:
        case LPAREN:
        case IDENT:
          e1 = expression(f1);
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        s1 = statement(g);
      {if (true) return new WhileNode(t, e1, s1);}
      } catch (ParseException e) {
    consumeUntil(g, e, "whilestat");
    {if (true) return new WhileNode(t, e1, s1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("whilestat");
    }
  }

  final public ListNode statlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statlist");
    try {
  ListNode l = null;
  StatementNode s = null;
  RecoverySet f = First.statlist.union(g);
      s = statement(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case BREAK:
      case STRING:
      case INT:
      case BOOLEAN:
      case DOUBLE:
      case LIST:
      case RETURN:
      case SUPER:
      case PRINT:
      case READ:
      case LBRACE:
      case SEMICOLON:
      case IDENT:
        l = statlist(g);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    {if (true) return new ListNode(s, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statlist");
    }
  }

  final public ExpreNode lvalue(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("lvalue");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t1 = null, t2 = null;
  ListNode l = null;
      try {
        t1 = jj_consume_token(IDENT);
      e1 = new VarNode(t1);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_15;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            t1 = jj_consume_token(LBRACKET);
            e2 = expression(null);
            jj_consume_token(RBRACKET);
      e1 = new IndexNode(t1, e1, e2);
            break;
          case DOT:
            t1 = jj_consume_token(DOT);
            t2 = jj_consume_token(IDENT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              jj_consume_token(LPAREN);
              l = arglist(null);
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[44] = jj_gen;
              ;
            }
      e1 = new CallNode(t1, e1, t2, l);
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      {if (true) return e1;}
      } catch (ParseException e) {
    consumeUntil(g, e, "lvalue");
    {if (true) return new VarNode(t1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lvalue");
    }
  }

  final public ExpreNode alocexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("alocexpression");
    try {
  ExpreNode e1 = null, e2 = null;
  ListNode l = null;
  Token t1, t2;
  RecoverySet f1 = new RecoverySet(RPAREN).union(g), f2 = new RecoverySet(RBRACKET).union(g);
      t1 = jj_consume_token(NEW);
      if (jj_2_4(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t2 = jj_consume_token(IDENT);
          break;
        case LIST:
          t2 = jj_consume_token(LIST);
          jj_consume_token(LT);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        l = arglist(f1);
        jj_consume_token(RPAREN);
      e1 = new NewObjectNode(t1, t2, l);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case DOUBLE:
        case IDENT:
          t2 = type(g);
          label_16:
          while (true) {
            jj_consume_token(LBRACKET);
            e2 = expression(f2);
            jj_consume_token(RBRACKET);
        if (l == null) l = new ListNode(e2);
        else l.add(e2);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[47] = jj_gen;
              break label_16;
            }
          }
      e1 = new NewArrayNode(t1, t2, l);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("alocexpression");
    }
  }

  final public ExpreNode expression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("expression");
    try {
  ExpreNode e1 = null, e2 = null;
  Token t = null;
      try {
        e1 = numexpr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case EQ:
        case GE:
        case LE:
        case NE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            t = jj_consume_token(LT);
            break;
          case GT:
            t = jj_consume_token(GT);
            break;
          case LE:
            t = jj_consume_token(LE);
            break;
          case GE:
            t = jj_consume_token(GE);
            break;
          case EQ:
            t = jj_consume_token(EQ);
            break;
          case NE:
            t = jj_consume_token(NE);
            break;
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          e2 = numexpr();
        e1 = new RelationalNode(t, e1, e2);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
      {if (true) return e1;}
      } catch (ParseException e) {
    consumeUntil(g, e, "expression");
    {if (true) return new RelationalNode(t, e1, e2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

  final public ExpreNode numexpr() throws ParseException, ParseEOFException {
    trace_call("numexpr");
    try {
  ExpreNode e1 = null, e2;
  Token t;
      e1 = term();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = term();
      e1 = new AddNode(t, e1, e2);
      }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("numexpr");
    }
  }

  final public ExpreNode term() throws ParseException, ParseEOFException {
    trace_call("term");
    try {
  ExpreNode e1 = null, e2;
  Token t;
      e1 = unaryexpr();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          t = jj_consume_token(STAR);
          break;
        case SLASH:
          t = jj_consume_token(SLASH);
          break;
        case REM:
          t = jj_consume_token(REM);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = unaryexpr();
      e1 = new MultNode(t, e1, e2);
      }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("term");
    }
  }

  final public ExpreNode unaryexpr() throws ParseException, ParseEOFException {
    trace_call("unaryexpr");
    try {
  ExpreNode e;
  Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      e = factor();
    {if (true) return ((t == null) ? e : new UnaryNode(t, e));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public ExpreNode factor() throws ParseException, ParseEOFException {
    trace_call("factor");
    try {
  ExpreNode e = null;
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
        t = jj_consume_token(INTEGER_CONSTANT);
      e = new IntConstNode(t);
        break;
      case STRING_CONSTANT:
        t = jj_consume_token(STRING_CONSTANT);
      e = new StringConstNode(t);
        break;
      case NULL_CONSTANT:
        t = jj_consume_token(NULL_CONSTANT);
      e = new NullConstNode(t);
        break;
      case DOUBLE_CONSTANT:
        t = jj_consume_token(DOUBLE_CONSTANT);
      e = new DoubleConstNode(t);
        break;
      case IDENT:
        e = lvalue(null);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = expression(null);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("factor");
    }
  }

  final public ListNode arglist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("arglist");
    try {
  ListNode l = null;
  ExpreNode e = null;
  RecoverySet f = new RecoverySet(COMMA).union(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_CONSTANT:
      case DOUBLE_CONSTANT:
      case STRING_CONSTANT:
      case NULL_CONSTANT:
      case PLUS:
      case MINUS:
      case LPAREN:
      case IDENT:
        e = expression(f);
      l = new ListNode(e);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[58] = jj_gen;
            break label_19;
          }
          jj_consume_token(COMMA);
          e = expression(f);
        l.add(e);
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("arglist");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20030001,0x20030001,0x20000000,0x20030000,0x30000,0x40000,0x2f801000,0x20000000,0x7801000,0x0,0xf801000,0x40000,0x0,0x80000,0x20000000,0x2f801000,0x0,0x0,0x0,0x0,0xf800000,0x20000000,0x20000000,0x7801000,0x0,0xf801000,0x0,0xf800000,0x8000000,0x0,0x8000000,0xf800000,0x7800000,0xc040e000,0x10000ac0,0xac0,0xcfc0e000,0x100000,0x0,0xac0,0x0,0xac0,0xcfc0e000,0x0,0x0,0x0,0x8000000,0x0,0x7800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xac0,0x0,0xac0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x400000,0x800000,0x0,0x80000,0x0,0x0,0x800000,0x400000,0x80000,0x400000,0x80000,0x800000,0x0,0x0,0x800000,0x400000,0x800000,0x400000,0x800000,0x80000,0x400000,0x80000,0x800000,0x800000,0x850003,0x804600,0x804600,0x850003,0x0,0x800000,0x804600,0x800000,0x804600,0x850003,0x500000,0x4000,0x500000,0x800000,0x400000,0x800000,0x1f8,0x1f8,0x600,0x600,0x3800,0x3800,0x600,0x600,0x804000,0x80000,0x804600,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
